#color str
RED='\e[0;31m'
LIGHT_RED='\e[1;31m'
BLACK='\e[0;30m'
BLUE='\e[0;34m'
LIGHT_BLUE='\e[1;34m'
GREEN='\e[0;32m'
LIGHT_GREEN='\e[1;32m'
PURPLE='\e[0;35m'
LIGHT_PURPLE='\e[1;35m'
CYAN='\e[0;36m'
LIGHT_CYAN='\e[1;36m'
BROWN='\e[0;33m'
YELLOW='\e[1;33m'
DARK_GRAY='\e[1;30m'
END='\e[0m'
#color str - end

# repo alias functions:
alias repobra='repo branches'
alias repob='repo branches'
alias repostashl='repo forall -p -c "git stash list"'
alias repos='repo status'
alias repoa='repo forall -c "git bra"'

function repock(){
    if [ "$1" == "" ];
    then
        echo "The usage : repock BRANCH_NAME"
    elif [[ "$1" == "mtk" ]]; then
        repo checkout alps-release-l0-audio.tc17
    else
        repo checkout $1
    fi
    repob
}

function repockf_dev(){
    if [ "$1" == "" ];
    then
        echo "The usage : repockf_dev BRANCH_NAME"
    else
        repo forall -c "git checkout -b $1 amt-dev"
        repob
    fi
}

function repopull(){
    if [ "$1" == "" ];
    then
        echo "The usage : repopull BRANCH_NAME"
    else
        repo forall -c "git pull l0_audio $1"
    fi
}

function repopush(){
    if [ "$1" == "" ];
    then
        echo "The usage : repopush BRANCH_NAME"
    else
        repo forall -c "git push l0_audio $1"
    fi
}

function repomerge(){
    if [ "$1" == "" ];
    then
        echo "The usage : repomerge BRANCH_NAME"
    else
        repo forall -c "git merge $1"
    fi
}

function repol(){
    
    if [ "$1" == "" ] && [ "$2" == "" ];
    then
        PNOW=$(date --date='1 days ago' "+%Y-%m-%d")
        CMD="git log --pretty=format:\"%h - %an, %ar : %s\" --name-status --since=$PNOW"
    elif [ "$2" == "" ];
    then
        PNOW=$(date --date=$1' days ago' "+%Y-%m-%d")
        CMD="git log --pretty=format:\"%h - %an, %ar : %s\" --name-status --since=$PNOW"   
    else
        PNOW=$(date --date=$1' days ago' "+%Y-%m-%d")
        CMD="git log --pretty=format:\"%h - %an, %ar : %s\" --name-status --since=$PNOW --author=$2"
    fi
    
    echo "Git LOG Since $CMD"
    repo forall -p -c "$CMD"
}

function repols(){
    if [ "$1" == "" ] && [ "$2" == "" ];
    then
        CMD="git log --pretty=format:\"%h - %an, %ar : %s\" --name-status"
    elif [ "$2" == "" ];
    then
        CMD="git log --pretty=format:\"%h - %an, %ar : %s\" --name-status --since=$1"
    else
        CMD="git log --pretty=format:\"%h - %an, %ar : %s\" --name-status --since=$1 --author=$2"
    fi
    echo "Git LOG Since $CMD"
    repo forall -p -c "$CMD"
}

function repolsd(){
    if [ "$1" == "" ] && [ "$2" == "" ];
    then
        CMD="git log --pretty=format:\"%h - %an, %cd : %s\" --name-status"
    elif [ "$2" == "" ];
    then
        CMD="git log --pretty=format:\"%h - %an, %cd : %s\" --name-status --since=$1"
    else
        CMD="git log --pretty=format:\"%h - %an, %cd : %s\" --name-status --since=$1 --author=$2"
    fi
    echo "Git LOG Since $CMD"
    repo forall -p -c "$CMD"
}

function repofs(){
    echo "Repo First Sync for MTK8516"
    repo sync -j4 -c --no-clone-bundle 
    repo forall -c "git fetch --all"
    repo forall -c "git checkout --track l0_audio/alps-release-l0-audio.tc17"
    repo forall -c "git checkout --track l0_audio/amt-dev"
}

# repo snap shot command
function reposs(){
    VER_PATH=$PWD/vendor/mediatek/appmainprog/main/amt_soundbar/vizio/VIZIO_SB_ver_info.h
    DATE=$(date +"%Y%m%d%H%M")

    if [ -f $VER_PATH ];
    then
        printf "$LIGHT_GREEN"
        printf "Repo Snap Shot Version Path = $VER_PATH , DATE = $DATE \n"
        AMT_BUILD_VER=$(grep 'AMT_VER_INFO_VERSION_VIZIO_PORTABLE' $VER_PATH | awk '{print $3}' | sed 's/\"//g' )
        MTK_BUILD_VER=$(grep 'AMT_VER_MTK_SDK_BUILD' $VER_PATH | awk '{print $3}' | sed 's/\"//g' )
        printf "AMT build version = $AMT_BUILD_VER , MTK build verison = $MTK_BUILD_VER \n"

        AMT_MANIFEST=vendor/mediatek/appmainprog/main/amt_soundbar/manifest/amt_$AMT_BUILD_VER'_'$MTK_BUILD_VER'_'$DATE.xml
        repo manifest -r -o $AMT_MANIFEST
        ls -la $AMT_MANIFEST
        printf "\n $END"
    else
        printf "$LIGHT_RED $VER_PATH doesn't exist \n $END" 
    fi
}

