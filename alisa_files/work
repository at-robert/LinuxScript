# work relative shell script alias functions:

#color str
RED='\e[0;31m'
LIGHT_RED='\e[1;31m'
BLACK='\e[0;30m'
BLUE='\e[0;34m'
LIGHT_BLUE='\e[1;34m'
GREEN='\e[0;32m'
LIGHT_GREEN='\e[1;32m'
PURPLE='\e[0;35m'
LIGHT_PURPLE='\e[1;35m'
CYAN='\e[0;36m'
LIGHT_CYAN='\e[1;36m'
BROWN='\e[0;33m'
YELLOW='\e[1;33m'
DARK_GRAY='\e[1;30m'
END='\e[0m'
#color str - end

GIGA_AD27QD_PATH=/media/psf/Home/Documents/Work_platforms/GigaByte/AD27QD
MAC_DOC_PATH=/media/psf/Home/Documents/Work_platforms/
MAC_DOWNLOAD_PATH=/media/psf/Home/Downloads/

TARGET_PATH=/media/psf/Home/Documents/Work_platforms/2020_Gaming_Monitors/Code/

alias rasp_power_off='python ~/Documents/Github/GoogleAssistIOT/mqtt_projects/mqtt_publish_poweroff.py'

alias goto_giga_ad27qd='cd $GIGA_AD27QD_PATH/'

alias svn_ci_f='svn ci -F $MAC_DOC_PATH/svn_log.txt'

alias login_92t_server='ssh robert.lo@192.168.12.113'

alias svn_log='svn log -v -c'

alias svn_change_st='svn status --changelist label'
alias svn_ci_change_f='svn commit --changelist label -F $MAC_DOC_PATH/svn_log.txt'

function goto_ana_server(){
    cd /media/psf/Home/Google\ 雲端硬碟/Work/Python/MasteringComputerVision_V1.01/ 
    echo "Hi Anaconda!!"
    jupyter notebook
}

function cp_amtranlib_jar(){
    echo "Copy amtranlib.jar to Android APP"
    cp /Users/kuochihlo/Downloads/amtranlib.jar /Users/kuochihlo/Documents/Work_platforms/msd95v_framework/apiservicetest/app/libs
}

function cp_jira_report(){
    SRC_PATH_FILE='/media/psf/Home/Downloads/VizioJIRA.txt'
    SRC_PATH_FILE1='/media/psf/Home/Downloads/VizioJIRA_rearrge.txt'
    # DEST_PATH='/run/user/1000/gvfs/smb-share:server=192.168.12.115,share=robert.lo'
    # DEST_PATH='/home/swrd/tmp/svn_server/'
    DEST_PATH='/home/robertlo/smb4k/'

    if [ "$1" == "" ];
    then
    cp $SRC_PATH_FILE $DEST_PATH
    elif [ "$1" == "arr" ]; 
    then
    #statementselif
    cp $SRC_PATH_FILE1 $DEST_PATH
    else
    cp $1 $DEST_PATH
    fi
}

function cp_wk_report_vm(){
    SRC_PATH=/home/swrd/tmp/svn_server/Data_ING/DOC/Weekly_Report
    weeknumber=`date +%V`
    One=0
    wkp=$(($weeknumber + $One))

    if [ -d $SRC_PATH ]; then
        echo " $SRC_PATH folder exist"
        else
        echo " $SRC_PATH folder doesn't exist"
        return
    fi
    
    echo "Week number plus one:$wkp"
    
    cp -fv $SRC_PATH/FW5-report-wk$wkp.docx $MAC_DOWNLOAD_PATH
}

function goto_xr871(){
    cd $MAC_DOC_PATH/GitHub/XR871/
    echo "Hi XR871 All Winner!!"
}

function goto_sony(){
    cd $MAC_DOC_PATH/Sony/TOOLS/sony_sn_convertor
    echo "Hi Sony Tools"
}

function goto_msi(){
    cd $MAC_DOC_PATH/MSI_soundbar/Code
    echo "Hi MSI Source Code"   
}

function goto_work(){
    cd $MAC_DOC_PATH
    echo "Hi Work_platforms"
}

function xor_cal(){
    echo "To calculate for factory command checksum"
    python ~/Google\ 雲端硬碟/Work/Python/xor_checksum/xor_chk_win.py
}

function mtk(){
    python ~/Google\ 雲端硬碟/Work/Python/csv_read/csv_mtk_jira.py ~/Downloads/ > ~/Downloads/mtk.txt
    cp /Volumes/robert.lo/mtk.txt /Volumes/robert.lo/mtk_backup.txt
    cp -fv ~/Downloads/mtk.txt /Volumes/robert.lo/
    rm "/Users/robertlo/Downloads/Issue List  Mediatek eService.csv"
    printf "$LIGHT_BLUE ==== [DIFF => MTK e-service] ==== \n"
    diff /Volumes/robert.lo/mtk_backup.txt /Volumes/robert.lo/mtk.txt --unchanged-line-format="" --old-line-format="[O]:%dn: %L" --new-line-format="[N]:%dn: %L"
    printf "$END \n"
}

function diffpack(){
    DATE=$(date +"%Y-%m-%d_%H%M")
    OUTPATH=~/tmp

    if [ -d $OUTPATH ];
    then
        echo "To remove and re-create $OUTPATH"
        rm -rf $OUTPATH
        mkdir $OUTPATH
    fi

    if [ "$1" == "" ] && [ "$2" == "" ];
    then
		echo "usage = diffpack DEST SRC"
        echo "SRC is the folder where to extract files out"
    else
        diff -Nrq --exclude='.git' --exclude='.build-id' --exclude='.repo' \
        	 --exclude='*.o' --exclude='*.a' --exclude='.svn' \
             --exclude='*.so' --exclude='*.ninja' --exclude='.svn' \
        	  $1 $2 | awk 'BEGIN{FS=" "}{print $4}' | xargs tar -zcvf $OUTPATH/'patch_'$DATE.tgz
    fi
}

function mtbt(){
    if [ "$1" == "m" ];
    then
        AMTPATH=~/mtk_git
        ls -la $AMTPATH/.repo/manifest.xml
    else
        AMTPATH=~/amt_git
    fi


    SPWD=$PWD
    echo " To store PWD = $SPWD"

    if [ -d $AMTPATH ];
    then
        echo "To check mtk8516 build version on the folder $AMTPATH"
        cd $AMTPATH/.repo/manifests
        git slog -1 | awk 'BEGIN {FS=" "}{print $10}'
        echo " The last PWD = $SPWD"
        cd $SPWD
    else
        echo "$AMTPATH doesn't exist"
        exit;
    fi

}

function hotwe(){
    echo " The current hot word env = $HOTWORD_ENV"

    if [ $HOTWORD_ENV == 'MACB_PRO' ]; then
        echo "This hot function would be working on Mac book pro"
    elif [[ $HOTWORD_ENV == 'UBTU14_4' ]]; then
        echo "This hot function would be working on Ubuntu 14.4"
    elif [[ $HOTWORD_ENV == 'RASPBI' ]]; then
        echo "This hot function would be working on Raspberry pi"
    else
        echo "This function won't be working on $HOTWORD_ENV"
    fi
}

function cp_mt8516(){

    if [ $HOTWORD_ENV == 'UBTU14_4' ]; then
        echo "This function will be working on $HOTWORD_ENV. Copy and check MTK8516 bin files"

        MT8516_OUT_PATH=out/target/product/aud8516p1_slc_linux
        cd $MT8516_OUT_PATH  &&  cp -rf MT8516_Android_scatter.txt preloader_aud8516p1_slc_linux.bin lk.bin boot.img recovery.img secro.img tz.img chrome.img system.img userdata.img /media/psf/robert.lo/mtk8516/FW/ && cd ../../../../
        ls -la $MT8516_OUT_PATH/MT8516_Android_scatter.txt
        ls -la $MT8516_OUT_PATH/preloader_aud8516p1_slc_linux.bin 
        ls -la $MT8516_OUT_PATH/lk.bin 
        ls -la $MT8516_OUT_PATH/boot.img 
        ls -la $MT8516_OUT_PATH/recovery.img 
        ls -la $MT8516_OUT_PATH/secro.img
        ls -la $MT8516_OUT_PATH/tz.img 
        ls -la $MT8516_OUT_PATH/chrome.img 
        ls -la $MT8516_OUT_PATH/system.img 
        ls -la $MT8516_OUT_PATH/userdata.img

        DATE=$(date +"%Y-%m-%d_%H:%M")
        printf "$LIGHT_CYAN The current time: $DATE $END \n"
    else
        echo "This function won't be working on $HOTWORD_ENV"
    fi
}

function wk_report_send(){
    weeknumber=`date +%V`
    One=1
    wkp=$(($weeknumber + $One))

    if [ -d /Volumes/robert.lo ]; then
        echo " /Volumes/robert.lo folder exist"
        else
        echo " No /Volumes/robert.lo folder exist"
        return
    fi
    
    echo "Week number plus one:$wkp"
    
    # python /Users/robertlo/Google\ 雲端硬碟/Work/Python/Email/SendMail_attach_fw5_wk_report.py
    python ~/Documents/GitHub/OftenUsed/Email/SendMail_attach_fw5_wk_report.py
    cp -fv /Volumes/robert.lo/Data/DOC/Weekly_Report/FW5-report-wk$wkp.docx /Users/robertlo/Documents/DOC
    
    find ~/Documents/DOC/ -maxdepth 1 -type f -name "*[Nn][Pp][Ii]*.pptx" -exec rm -rf {} \;
    find /Volumes/robert.lo -maxdepth 1 -type f -name "*[Nn][Pp][Ii]*.pptx" -exec cp -fv {} ~/Documents/DOC/ \;
}

# mount drive functions:
function mount_rob(){
    ROBPATH="/Volumes/robert.lo"
    if [ -d $ROBPATH ];
    then
        echo "================================"
        echo "$ROBPATH exists"
        echo "================================"
    else
        echo "====$ROBPATH doesn't exist======"
        sudo mkdir $ROBPATH
    fi

    mount -t smbfs //robert.lo:000000@192.168.14.129/robert.lo $ROBPATH
}

# To commit mtk8507 project to SVN
function cm_mtk8507_svn(){
    BDP_G=BDP_Generic
    BDP_L=BDP_Linux
    CAST_P=Cast_Audio

    if [ -d $BDP_G ] && [ -d $BDP_L ] && [ -d $CAST_P ]; then
        echo "commit mtk8507 to SVN, to add or delete new files"
        find . -type f -name "._.DS_Store" -exec rm {} \;
        find . -type f -name ".DS_Store" -exec rm {} \;
        svn del `svn status | sed -e '/^!/!d' -e 's/^!//'`
        svn status | grep '^\!' | cut -c8- | while read f; do svn rm "$f"; done
        svn add `svn status . | awk '/^[?]/{print $2}'`
        svn add . --force --no-ignore
        echo "Please press any key to commit to SVN or Ctrl+C to interrupt, to make sure ~/svnlog.txt to be edited"
        read line
        svn ci -F ~/svnlog.txt
    else
        echo "There are no mtk8507 project folder detected"
    fi 
}

# function bu_mt8516(){
#     SSD_PATH=/media/psf/Transcend

#     if [ -d $SSD_PATH ]; then
#         source build/envsetup.sh && lunch full_aud8516p1_slc_linux-eng && make -j4 2>&1 | tee $SSD_PATH/mt8516_log.txt
#     else
#         source build/envsetup.sh && lunch full_aud8516p1_slc_linux-eng && make -j4 2>&1 | tee ~/mt8516_log.txt
#     fi
# }

# alias bu_mt8516='source build/envsetup.sh && lunch full_aud8516p1_slc_linux-eng && make -j4 2>&1 | tee /media/psf/Transcend/log.txt'

alias py2a='pyenv global anaconda3-4.2.0'
alias py2s='pyenv global system'
alias pyinfo='pyenv versions'

alias mongod='~/mongo/bin/mongod --dbpath ~/mongo-data'

# alias cot='~/Google\ 雲端硬碟/Work/Python/collect_jira.sh'
alias bak_ring='sudo cp -a /Volumes/robert.lo/Data/Ring_Project/ ~/Documents/GitHub/Ring_Project/'

function cot(){
    source ~/Google\ 雲端硬碟/Work/Python/collect_jira.sh
    scp ~/Downloads/VizioJIRA.txt robert.lo@192.168.12.87:~
    scp ~/Downloads/VizioJIRA.txt robert.lo@192.168.12.87:~/AmTJIRA.txt

    cat ~/Downloads/VizioJIRA_rearrge.txt | grep "ASUSPG48UQ" | sed '/Not Gating/d' > ~/Downloads/tmp.txt
    scp ~/Downloads/tmp.txt robert.lo@192.168.12.87:~/AmtArrg.txt
    
    # scp ~/Downloads/VizioJIRA_rearrge.txt robert.lo@192.168.12.87:~/AmtArrg.txt
    cp ~/Downloads/VizioJIRA.txt ~/Downloads/AmTJIRA.txt

}

function up_svn_subfolders(){

    if [ "$1" == "" ];
    then
        printf "$LIGHT_RED Using the default path = $TARGET_PATH $END \n"
    else
        TARGET_PATH=$1
        printf "$LIGHT_GREEN The TARGET_PATH = $TARGET_PATH $END \n"
    fi

    for D in `find $TARGET_PATH -maxdepth 1 -type d`
    do
        # //Do whatever you need with D
        if [ -d "${D}" ] && [ ${D} != $TARGET_PATH ];
        then
        svn up $D
        # echo " PATH = $D"
        fi
    done
}

