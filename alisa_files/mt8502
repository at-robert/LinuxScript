
#color str
RED='\e[0;31m'
LIGHT_RED='\e[1;31m'
BLACK='\e[0;30m'
BLUE='\e[0;34m'
LIGHT_BLUE='\e[1;34m'
GREEN='\e[0;32m'
LIGHT_GREEN='\e[1;32m'
PURPLE='\e[0;35m'
LIGHT_PURPLE='\e[1;35m'
CYAN='\e[0;36m'
LIGHT_CYAN='\e[1;36m'
BROWN='\e[0;33m'
YELLOW='\e[1;33m'
DARK_GRAY='\e[1;30m'
END='\e[0m'
#color str - end

MAC_MT8502_PATH=/media/psf/Home/Documents/mtk8502
AMT_MT8502_PATH=/home/swrd/MTK8502/Trunk/amt/release
MEG_MT8502_PATH=/home/swrd/MTK8502/Merge/release

alias goto_mt8502_svn_amt='cd $MAC_MT8502_PATH/evk_svn/release'
alias goto_mt8502_svn_mtk='cd $MAC_MT8502_PATH/mtk_sdk/release'
alias goto_mt8502_amt='cd $AMT_MT8502_PATH'


# svn commands
alias svn_ci_f='svn ci -F $MAC_MT8502_PATH/svn_log.txt'

function ck_mt8502_ver(){
    SDK_VER=$(grep 'AUTO_VERSION' $AUTO_VER | awk '{print $3}' )
    INT_FW_VER=$(grep 'AMT_VER_INFO_VERSION' $FW_VER | awk '{print $3}' )
    printf "$GREEN=MTK 8502 SDK Version= "$SDK_VER"===$END \n"
    printf "$LIGHT_BLUE=AMT Version= "$INT_FW_VER"===$END \n"

    echo "CHECK VERSION first, Enter to continue or q"
    # Read input.
    read input_char

    if [ "$input_char" == 'q' ];
    then 
        echo "Quit"
    else
        echo "Go!!"
    fi
}

function cp_mt8502_t8032(){
    CMD=$1

    if [ "$1" == "" ];
    then
        echo "Copy new T8032 bin to AMT MT8502"
        cp $MAC_MT8502_PATH/T8032_MT8502/workspace/mt8563_T8032.bin $AMT_MT8502_PATH/BDP_Generic/res/mt8563_T8032.bin
    elif [ "$1" == "svn" ];
    then
        echo "Copy new T8032 bin to SVN MT8502"
        cp $MAC_MT8502_PATH/T8032_MT8502/workspace/mt8563_T8032.bin $MAC_MT8502_PATH/evk_svn/release/BDP_Generic/res/mt8563_T8032.bin
    else
        echo "Copy MTK T8032 bin to MT8502"
        cp $MAC_MT8502_PATH/mt8563_T8032.bin $AMT_MT8502_PATH/BDP_Generic/res/mt8563_T8032.bin
    fi
}

function bu_mt8502_amt(){
    AUTO_VER_AMT=$AMT_MT8502_PATH/BDP_Generic/src/system/prop/version/auto_version.h
    FW_VER_AMT=$AMT_MT8502_PATH/BDP_Generic/src/audio_application/amt_soundbar/vizio/VIZIO_SB_ver_info.h

    cd $AMT_MT8502_PATH/BDP_Generic/
    # sh autobuild/config8502soundbar_coreoff.sh
    sh autobuild/config8502_vizio_soundbar.sh

    SDK_VER=$(grep 'AUTO_VERSION' $AUTO_VER_AMT | awk '{print $3}' )
    INT_FW_VER=$(grep 'AMT_VER_INFO_VERSION' $FW_VER_AMT | awk '{print $3}' )
    printf "$GREEN=MTK 8502 SDK Version= "$SDK_VER"===$END \n"
    printf "$LIGHT_BLUE=AMT Version= "$INT_FW_VER"===$END \n"

    echo "CHECK VERSION first, Enter to continue or q"
    # Read input.
    read input_char

    if [ "$input_char" == 'q' ];
    then 
        echo "Quit"
    else
        echo "Go!!"
        sh build.sh | tee $MAC_MT8502_PATH/debug.log
    fi
}

function bu_mt8502_merge(){
    AUTO_VER_MEG=$MEG_MT8502_PATH/BDP_Generic/src/system/prop/version/auto_version.h
    FW_VER_MEG=$MEG_MT8502_PATH/BDP_Generic/src/audio_application/amt_soundbar/vizio/VIZIO_SB_ver_info.h

    cd $MEG_MT8502_PATH/BDP_Generic/
    # sh autobuild/config8502soundbar_coreoff.sh
    sh autobuild/config8502_vizio_soundbar.sh

    SDK_VER=$(grep 'AUTO_VERSION' $AUTO_VER_MEG | awk '{print $3}' )
    INT_FW_VER=$(grep 'AMT_VER_INFO_VERSION' $FW_VER_MEG | awk '{print $3}' )
    printf "$GREEN=MTK 8502 SDK Version= "$SDK_VER"===$END \n"
    printf "$LIGHT_BLUE=AMT Version= "$INT_FW_VER"===$END \n"

    echo "CHECK VERSION first, Enter to continue or q"
    # Read input.
    read input_char

    if [ "$input_char" == 'q' ];
    then 
        echo "Quit"
    else
        echo "Go!!"
        sh build.sh | tee $MAC_MT8502_PATH/debug.log
    fi
}

function cp_mt8502_amt(){
    VER=$1
    VM_IN=$AMT_MT8502_PATH
    VM_OUT=/media/psf

    if [ "$1" == "" ];
    then
        echo "Parameter shouldn't be empty"
        return
    fi

    echo "Liunx VM ENV"
    INPATH=$VM_IN/BDP_Generic/build
    OUTPATH=$VM_OUT/$VER/upg/

    ls -la $INPATH

    if [ -d $OUTPATH ];
    then
            echo "================================"
            echo "Outpath exists so that deleting it ........"
            echo "================================"
            rm -rf $OUTPATH
    else
        echo "================================"
    fi

    mkdir $OUTPATH

    printf "$LIGHT_RED[MTK8502 bootloader]\n"
    ls -l $INPATH/mt8502_bl_linux.bin | awk '{for (i=6; i <= NF; i++) {printf $i" "} printf "\n"}'
    printf "$LIGHT_GREEN[MTK8502 app]\n"
    ls -l $INPATH/8502_linux_demo_dbg.bin | awk '{for (i=6; i <= NF; i++) {printf $i" "} printf "\n"}'
    printf "$END"
    echo " "

    echo "===Copy MTK8502 release bin files to UPG folder =============="
    cp $INPATH/mt8502_bl_linux.bin $OUTPATH
    cp $INPATH/8502_linux_demo_dbg.bin $OUTPATH

    touch $OUTPATH/bl_flag
}

function cp_mt8502_merge(){
    VER=$1
    VM_IN=$MEG_MT8502_PATH
    VM_OUT=/media/psf

    if [ "$1" == "" ];
    then
        echo "Parameter shouldn't be empty"
        return
    fi

    echo "Liunx VM ENV"
    INPATH=$VM_IN/BDP_Generic/build
    OUTPATH=$VM_OUT/$VER/upg/

    ls -la $INPATH

    if [ -d $OUTPATH ];
    then
            echo "================================"
            echo "Outpath exists so that deleting it ........"
            echo "================================"
            rm -rf $OUTPATH
    else
        echo "================================"
    fi

    mkdir $OUTPATH

    printf "$LIGHT_RED[MTK8502 bootloader]\n"
    ls -l $INPATH/mt8502_bl_linux.bin | awk '{for (i=6; i <= NF; i++) {printf $i" "} printf "\n"}'
    printf "$LIGHT_GREEN[MTK8502 app]\n"
    ls -l $INPATH/8502_linux_demo_dbg.bin | awk '{for (i=6; i <= NF; i++) {printf $i" "} printf "\n"}'
    printf "$END"
    echo " "

    echo "===Copy MTK8502 release bin files to UPG folder =============="
    cp $INPATH/mt8502_bl_linux.bin $OUTPATH
    cp $INPATH/8502_linux_demo_dbg.bin $OUTPATH

    touch $OUTPATH/bl_flag
}

function prepare_mt8502_sdk(){
    if [ "$#" -lt 1 ]; then
    echo "Usage: prepare_mt8502_sdk [output folder]"
    return
    fi

    OUTPATH=$1
    BUILDAUTO_VER=$OUTPATH/release/BDP_Generic/src/system/prop/version/auto_version.h
    MTK_TALBALL=8502_VIZIO_release.tar.gz
    LINUX_PACK=linux-3.10.26.tar.gz

    if [ -f $MTK_TALBALL ] && [ -f $LINUX_PACK ];
    then
    echo " $MTK_TALBALL or $LINUX_PACK exist "
    else
    echo " $MTK_TALBALL or $LINUX_PACK aren't exist "
    return
    fi

    if [ -d $OUTPATH ];
    then
            echo "================================"
            echo "$OUTPATH exists so that deleting it ........"
            echo "================================"
            rm -rf $OUTPATH
    fi

    mkdir -p $OUTPATH
    tar -zxvf $MTK_TALBALL -C $OUTPATH
    cp $LINUX_PACK $OUTPATH/release/BDP_Linux/

    cd $OUTPATH/release/BDP_Linux/
    tar -zxvf release_linux.tar.gz
    tar -zxvf patch.tar.gz
    tar xvf $LINUX_PACK

    rm release_linux.tar.gz
    rm patch.tar.gz
    rm $LINUX_PACK
    cd ../../..

    SDK_VER=$(grep 'AUTO_VERSION' $BUILDAUTO_VER | awk '{print $3}' )

    echo "================================"
    echo "MTK package = HQ$SDK_VER "
    echo "================================"

    touch $OUTPATH/readme_$SDK_VER.txt
    mv $MTK_TALBALL $OUTPATH/$MTK_TALBALL
}