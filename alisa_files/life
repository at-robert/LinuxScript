
#color str
RED='\e[0;31m'
LIGHT_RED='\e[1;31m'
BLACK='\e[0;30m'
BLUE='\e[0;34m'
LIGHT_BLUE='\e[1;34m'
GREEN='\e[0;32m'
LIGHT_GREEN='\e[1;32m'
PURPLE='\e[0;35m'
LIGHT_PURPLE='\e[1;35m'
CYAN='\e[0;36m'
LIGHT_CYAN='\e[1;36m'
BROWN='\e[0;33m'
YELLOW='\e[1;33m'
DARK_GRAY='\e[1;30m'
END='\e[0m'
#color str - end

# alias envy='python /Users/mac/Google\ 雲端硬碟/Work/Python/Selenium/Envy_SE.py http://www81.eyny.com/forum-576-1.html'
alias jupy='jupyter notebook'
alias pppoe_on='pon dsl-provider'
alias pppoe_off='poff dsl-provider'

LINUXSCRIPT_PATH=~/Documents/Github/LinuxScript/
OFTENUSED_PATH=~/Documents/Github/OftenUsed/

# V_FOLDER_PATH=D:/\work_platform/\v
# USB_FOLDER_PATH=F:/\

USB_FOLDER_PATH=Default
# Folder setting for V FOLDER
T_PATH=/Volumes/Transcend/
DOWNLOAD_PATH=~/Downloads/
V_FOLDER_PATH=~/Downloads/v/
V_FOLDER_T_PATH=/Volumes/Transcend/v
USB_FOLDER_PATH_2T=/Volumes/HDD_2T/
USB_FOLDER_PATH_4T=/Volumes/HDD_4T/
USB_FOLDER_PATH_8T=/Volumes/HDD_8T/


USB_FOLDER_PATH_ROB_SANDISK=/Volumes/RobSanDisk


USB_FOLDER_PATH_MyBook="/Volumes/My Book Studio"


ALIST_PATH=~/Downloads/temp.txt
ALIST_PATH_DUP=~/Downloads/dup.txt

SCPF_FODLER_PATH=~/Downloads/scp_folder

DATE=$(date +"%Y%m%d%H%M")

alias tw_lottery_chk='python $OFTENUSED_PATH/TW_Lottery/taiwanlottery.py'

function dayoff(){
    python $OFTENUSED_PATH/Dayoff/fw5_day_off.py
}

function chk_srt_order(){
    python $OFTENUSED_PATH/SRT_Check/srt_check.py $1
}

function envy(){
    #python $OFTENUSED_PATH/Selenium/Envy_SE.py http://www81.eyny.com/forum-576-1.html
    pyenv exec python $OFTENUSED_PATH/Selenium/Envy_SE.py http://www81.eyny.com/forum-576-1.html
}

function stock(){
    python $OFTENUSED_PATH/StockTW/get_divined_date.py
}

function supdate(){
    # cd $HOME/Google\ 雲端硬碟/Work/Python/GoogleSheetPython/
    # python $HOME/Google\ 雲端硬碟/Work/Python/GoogleSheetPython/get_current_year_spend.py

    cd /Users/kuochihlo/Library/CloudStorage/GoogleDrive-atttrobert@gmail.com/我的雲端硬碟/Work/Python/GoogleSheetPython
    python3 get_current_year_spend.py
}

function gupdate(){
        echo " The current hot word env = $HOTWORD_ENV"

    if [ $HOTWORD_ENV == 'MACB_PRO' ]; then
        echo "This hot function would be working on Mac book pro"
        path=~/Documents/Github
    elif [[ $HOTWORD_ENV == 'IMAC_5K' ]]; then
        echo "This hot function would be working on IMac 5K"
        path=~/Documents/Github
    else
        echo "This function would be regular Linux environment"
        path=~/Github
    fi

    cd $path/Amt_work_platform
    printf "$LIGHT_RED Git Pull Amt_work_platform $END \n" 
    git pull
    cd $path/LinuxScript
    printf "$LIGHT_RED Git Pull LinuxScript $END \n" 
    git pull
    cd $path/Taiwan_Stock
    printf "$LIGHT_GREEN Git Pull Taiwan_Stock $END \n"
    git pull
    cd $path/GitTips
    printf "$LIGHT_CYAN Git Pull GitTips $END \n"
    git pull
    cd $path/OftenUsed
    printf "$YELLOW Git Pull OftenUsed $END \n"
    git pull
    cd $path/RaspPython
    printf "$YELLOW Git Pull RaspPython $END \n"
    git pull
    cd $path/Arduino
    printf "$LIGHT_BLUE Git Pull Arduino $END \n"
    git pull
    cd $path/Plotly-Dashboards-with-Dash
    printf "$LIGHT_RED Git Pull Plotly and Dashboards $END \n"
    git pull
    cd $path/GolangExercise
    printf "$LIGHT_GREEN Git Golang Exercise $END \n"
    git pull
    cd $path/GoogleAssistIOT
    printf "$LIGHT_CYAN Git GoogleAssistIOT $END \n"
    git pull

    cd $path
}

function py2(){
    echo "system" > ~/Google\ 雲端硬碟/Work/Python/.python-version
    python --version
}

function py3(){
    echo "anaconda3-5.3.0" > ~/Google\ 雲端硬碟/Work/Python/.python-version
    python --version
}

function scp_from_rapix(){
    RASPX_IP=$(cat ~/.ssh/rap_x_server | grep -m 1 'host' | awk '{print $3}')
    echo "Raspi_x ip addr = $RASPX_IP"
    # scp pi@$RASPX_IP:~/webcam/*.jpg  .
    scp pi@$RASPX_IP:~/uart_log.log .
}

function scp_from_113(){
    echo "Copy files from 192.168.12.113 Tmp folder"
    scp -r robert.lo@192.168.12.113:/home/robert.lo/tmp ~/Downloads/Temp/
}

function net_ok(){
    RETRY=0
    ONE=1
    MARGIN=6
    CONNECT='NOT'

    while [ $CONNECT == 'NOT' ] && [ $RETRY -lt $MARGIN ]; do
        echo "To check Internet for $RETRY times"
        if ping -q -c 1 -W 1 google.com >/dev/null; then
            echo "The network is up"
            CONNECT='ON'
        else
            echo "The network is down"
            CONNECT='NOT'
            RETRY=$(($RETRY + $ONE))
            echo " Retry Count = $RETRY"
            sleep 10
        fi
    done
}

function keep_connect(){

    while True; do
        if ping -q -c 1 -W 1 google.com >/dev/null; then
            echo "The network is up !! "
            sleep 5
        else
            echo "The network is down"
            break
        fi
    done
}

function amk(){
    NUM=0
    STR=""
    
    if [ "$1" == "" ] ;
    then
        echo "First parameter can't be empty"
        NUM=10
        return 
    else
        NUM=$1
    fi

    if [ "$2" == "" ] ;
    then
        echo "Empty str"
    else
        STR=$2
    fi

    printf "$LIGHT_GREEN Creating folder at num = $NUM , str = $STR $END \n"

    if [ "$1" == "12mon" ] || [ "$1" == "12MON" ] ;
    then
        mkdir "01JAN"
        mkdir "02FEB"
        mkdir "03MAR"
        mkdir "04APL"
        mkdir "05MAY"
        mkdir "06JUN"
        mkdir "07JUL"
        mkdir "08AUG"
        mkdir "09SEP"
        mkdir "10OCT"
        mkdir "11NOV"
        mkdir "12DEC"
    elif [ "$1" == "proj" ] && [ "$2" == "" ] ;
    then
        echo " second parameter can't be empty"
        return
    elif [ "$1" == "proj" ] && [ "$2" != "" ] ;
    then
        echo " Making Project Folder = $2"
        mkdir $2
        mkdir -p $2/DOC $2/SCH $2/DATA_SHEET $2/EDID $2/TOOLS
        mkdir -p $2/DOC/EngSpec $2/DOC/OSD_Tree
        mkdir -p $2/SCH/EVT $2/SCH/DVT $2/SCH/PVT $2/SCH/PMP
        mkdir -p $2/EDID/EVT $2/EDID/DVT $2/EDID/PVT $2/EDID/PMP
        mkdir -p $2/DATA_SHEET/Panel $2/DATA_SHEET/SOC $2/DATA_SHEET/Amp
    else
        mkdir $(printf "$STR%02i " $(seq 1 $NUM))
    fi
}

function afind(){
    INFILE=$1

    if [ "$1" == "" ] ;
    then
        echo "Finding ._* pattern"
        INFILE='._*'
    fi

    find . -type f -name "$INFILE" -exec ls -la {} \;
    count=$(find . -type f -name "$INFILE" -exec ls -la {} \; | wc -l | sed 's/^[ \t]*//g')

    echo "Found $count files"

    if [ "$count" == "0" ]; then
        return
    fi


    # Read input.
    echo "Please input d to delete all found files or exit"
    read input_char

    # Check input char.
    if [ "$input_char" == "d" ]; then
        echo "Delete all $INFILE!"
        find . -type f -name "$INFILE" -exec rm {} \;
    else
        echo "Don't delete anything"
        echo ""
        return
    fi
}

function aredir(){
    python ~/Google\ 雲端硬碟/Work/Python/FileHandle/adv_redirect.py $1 "$2"
}

function adv_redir(){
    python ~/Google\ 雲端硬碟/Work/Python/FileHandle/adv_redirect.py $1 "$2"
}


#function arename(){
    # python ~/Google\ 雲端硬碟/Work/Python/Rename/adv_rename.py $1 "$2"
# }

function connect_rapi(){
    if [ "$1" == "" ] ;
    then 
        echo " LAN number is required "
        return
    else
        ssh pi@192.168.0.$1
    fi
}

function stock_div(){
    python ~/Documents/GitHub/Taiwan_Stock/tw_stock_divden_release_date.py
}

function ass2srt(){
    $LINUXSCRIPT_PATH/Ass2Srt/ass2srt.sh
}

function adu(){
    du -sk * | sort -g | awk '{ 

        numBytes = $1 * 1024; 
        numUnits = split("B K M G T P", unit); 
        num = numBytes; 
        iUnit = 0; 

        while(num >= 1024 && iUnit + 1 < numUnits) { 
            num = num / 1024; 
            iUnit++; 
        } 

        $1 = sprintf( ((num == 0) ? "%6d%s " : "%6.1f%s "), num, unit[iUnit + 1]);
        print $0; 

    }'
    echo " To list the size of files !!!"
}

function mount_win_vm_disk(){
    password='000000'    
    HiMediaMacAddr=00:1C:42:4D:4C:AA
    HiMediaMacIP=$(echo "$password\n" | sudo -S nmap -sP 192.168.12.* | awk '/Nmap scan report for/{printf $6;}/MAC Address:/{print " => "$3;}' | grep -i "$HiMediaMacAddr" | sort)
    HiMediaMacIP=$(echo "$HiMediaMacIP" | sed 's/=>//g' | sed 's/00:1C:42:4D:4C:AA//g' | sed 's/^[ \t]*//g' | sed 's/[ \t]*$//g')
    echo "HiMediaMacIP = $HiMediaMacIP"
}

# To move video files to a certain folder V
function amv(){
    
    if [ -d $T_PATH ];
    then
        DES_PATH=$V_FOLDER_T_PATH
        DOWNLOAD_PATH=$T_PATH
    else
        DES_PATH=~/Downloads/v/
        DOWNLOAD_PATH=~/Downloads/
    fi

    cd $DOWNLOAD_PATH

    if [ -d $DES_PATH ]; 
    then
        printf "$LIGHT_RED $DES_PATH folder exist $END"
    else
        echo " $DES_PATH folder doesn't exist"
        return
    fi

    printf "$LIGHT_GREEN Moving video files type : mkv, mov, mp4, avi to the folder V $END \n" 
    find . -maxdepth 2 -type f -name "*.mp4" -exec mv {} $DES_PATH \;
    find . -maxdepth 2 -type f -name "*.mov" -exec mv {} $DES_PATH \;
    find . -maxdepth 2 -type f -name "*.mkv" -exec mv {} $DES_PATH \;
    find . -maxdepth 2 -type f -name "*.avi" -exec mv {} $DES_PATH \;
    find . -maxdepth 2 -type f -name "*.ts" -exec mv {} $DES_PATH \;

    find $DOWNLOAD_PATH -maxdepth 1 -type f -name 'FC2*' -exec rm -rf {} \;
    find $DOWNLOAD_PATH -maxdepth 1 -type d -name 'FC2*' -exec rm -rf {} \;
    find $DOWNLOAD_PATH -maxdepth 1 -type f -name 'fc2*' -exec rm -rf {} \;
    find $DOWNLOAD_PATH -maxdepth 1 -type d -name 'fc2*' -exec rm -rf {} \;
}


function aex(){
    FILENAME=~/Downloads/temp.txt

    if [ -d $T_PATH ];
    then
        cd $T_PATH
    else
        cd ~/Downloads/
    fi


    if [ "$1" == "" ] ;
    then
        PASS=pennyinlive@eyny
        printf "$LIGHT_RED -The first parameter should not be empty - $END"
        return 
    elif [ "$1" == "h" ] ;
    then
        PASS=hkmmopqqo-eyny
    elif [ "$1" == "9" ] ;
    then
        PASS=9527
    elif [ "$1" == "fc" ];
    then
        PASS=taiwan88251分享於伊莉論壇fc2ppv-
    else
        PASS=$1
    fi

    printf "$LIGHT_GREEN  Advance Extracting Rar files with the Password = $PASS $END \n"


    if [ "$1" == "fc" ] ;
    then
        find . -maxdepth 1 -type f -name "*.rar" -exec basename {} \; | sed 's/.rar//' | sed 's/FC2PPV-//' | sed 's/fc2ppv_//' > $FILENAME
        while read line; do unrar x -p$PASS$line -y 'FC2PPV-'$line.rar ; done < $FILENAME
        while read line; do unrar x -p$PASS$line -y 'fc2ppv_'$line.rar ; done < $FILENAME
    else
        find . -maxdepth 1 -type f -name "*.rar" -exec unrar x -p$PASS -y {} \;
    fi


    if [ "$2" == "s" ] ;
    then
        python $OFTENUSED_PATH/Notification/notify.py
    else
        osascript -e 'tell application "Terminal" to display alert "script done!"'
    fi

    clear
}



function acpy(){
    if [ "$1" == "" ] ;
    then
        echo "First parameter can't be empty"
        return 
    else
        echo "ok"
    fi

    scp $1 robert.lo@192.168.12.87:~
}


# New Year Folders
function nyf(){
    YEAR=2025
    cd /Volumes/My\ Book\ Studio/Data/MyDoc/Robert.Lo/Robert\ Personal\ Stuff/Personal\ Bills/

    printf "$LIGHT_PURPLE  New Year Folders Creating on $YEAR \n $END"


    if [ -d Network/$YEAR ]; 
    then
        printf "$LIGHT_RED Network/$YEAR folder exist \n $END"
    else
        printf "$LIGHT_GREEN Creating New Year Folders on $YEAR \n $END"
        # echo " Network/$YEAR folder doesn't exist "
        mkdir -p Network/$YEAR/01 Network/$YEAR/02 Network/$YEAR/03 Network/$YEAR/04 Network/$YEAR/05 Network/$YEAR/06 Network/$YEAR/07 Network/$YEAR/08 Network/$YEAR/09 Network/$YEAR/10 Network/$YEAR/11 Network/$YEAR/12
        mkdir -p Water/$YEAR/01 Water/$YEAR/02 Water/$YEAR/03 Water/$YEAR/04 Water/$YEAR/05 Water/$YEAR/06 Water/$YEAR/07 Water/$YEAR/08 Water/$YEAR/09 Water/$YEAR/10 Water/$YEAR/11 Water/$YEAR/12
        mkdir -p Cell_Phone/$YEAR/01 Cell_Phone/$YEAR/02 Cell_Phone/$YEAR/03 Cell_Phone/$YEAR/04 Cell_Phone/$YEAR/05 Cell_Phone/$YEAR/06 Cell_Phone/$YEAR/07 Cell_Phone/$YEAR/08 Cell_Phone/$YEAR/09 Cell_Phone/$YEAR/10 Cell_Phone/$YEAR/11 Cell_Phone/$YEAR/12
        mkdir -p Expenses/$YEAR/01 Expenses/$YEAR/02 Expenses/$YEAR/03 Expenses/$YEAR/04 Expenses/$YEAR/05 Expenses/$YEAR/06 Expenses/$YEAR/07 Expenses/$YEAR/08 Expenses/$YEAR/09 Expenses/$YEAR/10 Expenses/$YEAR/11 Expenses/$YEAR/12
        mkdir -p Electricity/$YEAR/01 Electricity/$YEAR/02 Electricity/$YEAR/03 Electricity/$YEAR/04 Electricity/$YEAR/05 Electricity/$YEAR/06 Electricity/$YEAR/07 Electricity/$YEAR/08 Electricity/$YEAR/09 Electricity/$YEAR/10 Electricity/$YEAR/11 Electricity/$YEAR/12
        mkdir -p Credit/Fubon富邦/$YEAR/01 Credit/Fubon富邦/$YEAR/02 Credit/Fubon富邦/$YEAR/03 Credit/Fubon富邦/$YEAR/04 Credit/Fubon富邦/$YEAR/05 Credit/Fubon富邦/$YEAR/06 Credit/Fubon富邦/$YEAR/07 Credit/Fubon富邦/$YEAR/08 Credit/Fubon富邦/$YEAR/09 Credit/Fubon富邦/$YEAR/10 Credit/Fubon富邦/$YEAR/11 Credit/Fubon富邦/$YEAR/12
        mkdir -p Credit/ChinaTrust中信/$YEAR/01 Credit/ChinaTrust中信/$YEAR/02 Credit/ChinaTrust中信/$YEAR/03 Credit/ChinaTrust中信/$YEAR/04 Credit/ChinaTrust中信/$YEAR/05 Credit/ChinaTrust中信/$YEAR/06 Credit/ChinaTrust中信/$YEAR/07 Credit/ChinaTrust中信/$YEAR/08 Credit/ChinaTrust中信/$YEAR/09 Credit/ChinaTrust中信/$YEAR/10 Credit/ChinaTrust中信/$YEAR/11 Credit/ChinaTrust中信/$YEAR/12
        mkdir -p Credit/Rakuten樂天/$YEAR/01 Credit/Rakuten樂天/$YEAR/02 Credit/Rakuten樂天/$YEAR/03 Credit/Rakuten樂天/$YEAR/04 Credit/Rakuten樂天/$YEAR/05 Credit/Rakuten樂天/$YEAR/06 Credit/Rakuten樂天/$YEAR/07 Credit/Rakuten樂天/$YEAR/08 Credit/Rakuten樂天/$YEAR/09 Credit/Rakuten樂天/$YEAR/10 Credit/Rakuten樂天/$YEAR/11 Credit/Rakuten樂天/$YEAR/12
    fi

}

function aname(){
        python $OFTENUSED_PATH/Rename/adv_rename.py
}

function sdata(){

    if [ -d $USB_FOLDER_PATH_ROB_SANDISK ];
    then
        printf "$LIGHT_GREEN SData Folder = $USB_FOLDER_PATH_ROB_SANDISK \n $END"
        code '/Volumes/RobSanDisk/Data/MyDoc/Robert.Lo/S Data'

    elif [ -d "$USB_FOLDER_PATH_MyBook" ];
    then
        printf "$LIGHT_GREEN SData Folder = $USB_FOLDER_PATH_MyBook \n $END"
        code '/Volumes/My Book Studio/Data/MyDoc/Robert.Lo/S Data'
    else
        printf "$LIGHT_RED The Disk doesn't exist \n $END"
        return
    fi

}

function aback(){

    if [ -d $V_FOLDER_PATH ];
    then
        printf "$LIGHT_GREEN V Folder = $V_FOLDER_PATH \n $END"
    else
        printf "$LIGHT_RED $V_FOLDER_PATH doesn't exist \n $END"
        return
    fi


    if [ -d $USB_FOLDER_PATH_8T ];
    then
        USB_FOLDER_PATH=$USB_FOLDER_PATH_8T
        printf "$LIGHT_GREEN USB Folder = $USB_FOLDER_PATH \n $END"
    
    elif [ -d $USB_FOLDER_PATH_4T ];
    then
        USB_FOLDER_PATH=$USB_FOLDER_PATH_4T
        printf "$LIGHT_GREEN USB Folder = $USB_FOLDER_PATH \n $END"
    
    elif [ -d $USB_FOLDER_PATH_2T ] ;
    then
        USB_FOLDER_PATH=$USB_FOLDER_PATH_2T
        printf "$LIGHT_GREEN USB Folder = $USB_FOLDER_PATH \n $END"
    else
        printf "$LIGHT_RED $USB_FOLDER_PATH doesn't exist \n $END"
        return
    fi

    mkdir $USB_FOLDER_PATH/\v_$DATE

    # echo $DATE

    if [ -d $V_FOLDER_T_PATH ];
    then
        find $V_FOLDER_T_PATH -type f -name "*.*" -exec cp -v {} $USB_FOLDER_PATH/\v_$DATE \;
    else
        find $V_FOLDER_PATH -type f -name "*.*" -exec cp -v {} $USB_FOLDER_PATH/\v_$DATE \;
    fi

}


function alist(){


    if [ -d $USB_FOLDER_PATH_8T ];
    then
        USB_FOLDER_PATH=$USB_FOLDER_PATH_8T
        printf "$LIGHT_GREEN USB Folder = $USB_FOLDER_PATH \n $END"

    elif [ -d $USB_FOLDER_PATH_4T ];
    then
        USB_FOLDER_PATH=$USB_FOLDER_PATH_4T
        printf "$LIGHT_GREEN USB Folder = $USB_FOLDER_PATH \n $END"
    
    elif [ -d $USB_FOLDER_PATH_2T ] ;
    then
        USB_FOLDER_PATH=$USB_FOLDER_PATH_2T
        printf "$LIGHT_GREEN USB Folder = $USB_FOLDER_PATH \n $END"
    else
        printf "$LIGHT_RED $USB_FOLDER_PATH doesn't exist \n $END"
        return
    fi

    cd $USB_FOLDER_PATH
    echo "Switch to the folder $USB_FOLDER_PATH"
    find . -type f -name "*.mp4" -exec basename {} \;  > $ALIST_PATH
    find . -type f -name "*.mkv" -exec basename {} \;  >> $ALIST_PATH
    find . -type f -name "*.avi" -exec basename {} \;  >> $ALIST_PATH
    find . -type f -name "*.mov" -exec basename {} \;  >> $ALIST_PATH

    sort $ALIST_PATH | uniq -d > $ALIST_PATH_DUP

    echo $ALIST_PATH_DUP
}


function aremove(){

    # To remove unncessary strings generated by Google Calendar of Chroma web browser version 

    if [ -f $1 ];
    then
        printf "$LIGHT_GREEN The file $1 does exist \n $END"
    else
        printf "$LIGHT_RED The file $1 doesn't exist \n $END"
        return
    fi

    cat $1 | sed 's/<p><b>/\n/g' | sed 's/<\/b>//g' | sed 's/<\/p>//g'

    printf " \n "

}

function wechats(){

    if [ "$1" == "c" ] ;
    then
        killall 企业微信
        killall WeChat
    else
        open -n /Applications/企业微信.app
        open -n /Applications/WeChat.app
    fi

    # cd $HOME/Google\ 雲端硬碟/Work/Python/
}

function scpf(){

    if [ -d $SCPF_FODLER_PATH ];
    then
        scp -r $SCPF_FODLER_PATH robert.lo@192.168.12.87:~/scp_folder 
    else
        printf "SCPF path doesn't exist !!"
    fi
}


function collect_jira(){
    python3 ~/Documents/Github/Amt_work_platform/Jira/Jira_2020_analyzer.py > ~/Downloads/AmTRAN_JIRA.txt
    cat ~/Downloads/AmTRAN_JIRA.txt | grep "JIRA Statistics" | sed 's/.*\[JIRA Statistics\]//g'
}






