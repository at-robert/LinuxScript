#color str
RED='\e[0;31m'
LIGHT_RED='\e[1;31m'
BLACK='\e[0;30m'
BLUE='\e[0;34m'
LIGHT_BLUE='\e[1;34m'
GREEN='\e[0;32m'
LIGHT_GREEN='\e[1;32m'
PURPLE='\e[0;35m'
LIGHT_PURPLE='\e[1;35m'
CYAN='\e[0;36m'
LIGHT_CYAN='\e[1;36m'
BROWN='\e[0;33m'
YELLOW='\e[1;33m'
DARK_GRAY='\e[1;30m'
END='\e[0m'
#color str - end

# alias envy='python /Users/mac/Google\ 雲端硬碟/Work/Python/Selenium/Envy_SE.py http://www81.eyny.com/forum-576-1.html'
alias jupy='jupyter notebook'
alias pppoe_on='pon dsl-provider'
alias pppoe_off='poff dsl-provider'

LINUXSCRIPT_PATH=~/Documents/Github/LinuxScript/
OFTENUSED_PATH=~/Documents/Github/OftenUsed/

alias tw_lottery_chk='python $OFTENUSED_PATH/TW_Lottery/taiwanlottery.py'


function chk_srt_order(){
    python $OFTENUSED_PATH/SRT_Check/srt_check.py $1
}

function envy(){
    python $HOME/Google\ 雲端硬碟/Work/Python/Selenium/Envy_SE.py http://www81.eyny.com/forum-576-1.html
}

function supdate(){
    cd $HOME/Google\ 雲端硬碟/Work/Python/GoogleSheetPython/
    python $HOME/Google\ 雲端硬碟/Work/Python/GoogleSheetPython/get_current_year_spend.py
}

function gupdate(){
        echo " The current hot word env = $HOTWORD_ENV"

    if [ $HOTWORD_ENV == 'MACB_PRO' ]; then
        echo "This hot function would be working on Mac book pro"
        path=~/Documents/Github
    elif [[ $HOTWORD_ENV == 'IMAC_5K' ]]; then
        echo "This hot function would be working on IMac 5K"
        path=~/Documents/Github
    else
        echo "This function would be regular Linux environment"
        path=~/Github
    fi

    cd $path/LinuxScript
    printf "$LIGHT_RED Git Pull LinuxScript $END \n" 
    git pull
    cd $path/Taiwan_Stock
    printf "$LIGHT_GREEN Git Pull Taiwan_Stock $END \n"
    git pull
    cd $path/GitTips
    printf "$LIGHT_CYAN Git Pull GitTips $END \n"
    git pull
    cd $path/OftenUsed
    printf "$YELLOW Git Pull OftenUsed $END \n"
    git pull
    cd $path/RaspPython
    printf "$YELLOW Git Pull RaspPython $END \n"
    git pull
    cd $path/Arduino
    printf "$LIGHT_BLUE Git Pull Arduino $END \n"
    git pull
    cd $path/Plotly-Dashboards-with-Dash
    printf "$LIGHT_RED Git Pull Plotly and Dashboards $END \n"
    git pull
    cd $path/GolangExercise
    printf "$LIGHT_GREEN Git Golang Exercise $END \n"
    git pull
    cd $path/GoogleAssistIOT
    printf "$LIGHT_CYAN Git GoogleAssistIOT $END \n"
    git pull

    cd $path
}

function py2(){
    echo "system" > ~/Google\ 雲端硬碟/Work/Python/.python-version
    python --version
}

function py3(){
    echo "anaconda3-5.3.0" > ~/Google\ 雲端硬碟/Work/Python/.python-version
    python --version
}

function scp_from_rapix(){
    RASPX_IP=$(cat ~/.ssh/rap_x_server | grep -m 1 'host' | awk '{print $3}')
    echo "Raspi_x ip addr = $RASPX_IP"
    # scp pi@$RASPX_IP:~/webcam/*.jpg  .
    scp pi@$RASPX_IP:~/uart_log.log .
}

function scp_from_113(){
    echo "Copy files from 192.168.12.113 Tmp folder"
    scp -r robert.lo@192.168.12.113:/home/robert.lo/tmp ~/Downloads/Temp/
}

function net_ok(){
    RETRY=0
    ONE=1
    MARGIN=6
    CONNECT='NOT'

    while [ $CONNECT == 'NOT' ] && [ $RETRY -lt $MARGIN ]; do
        echo "To check Internet for $RETRY times"
        if ping -q -c 1 -W 1 google.com >/dev/null; then
            echo "The network is up"
            CONNECT='ON'
        else
            echo "The network is down"
            CONNECT='NOT'
            RETRY=$(($RETRY + $ONE))
            echo " Retry Count = $RETRY"
            sleep 10
        fi
    done
}

function amk(){
    if [ "$1" == "" ] ;
    then
        echo "First parameter can't be empty"
        NUM=10
        return 
    else
        NUM=$1
    fi

    if [ "$2" == "" ] ;
    then
        echo "Default str"
    else
        STR=$2
    fi

    if [ "$1" == "12mon" ] || [ "$1" == "12MON" ] ;
    then
        mkdir "01JAN"
        mkdir "02FEB"
        mkdir "03MAR"
        mkdir "04APL"
        mkdir "05MAY"
        mkdir "06JUN"
        mkdir "07JUL"
        mkdir "08AUG"
        mkdir "09SEP"
        mkdir "10OCT"
        mkdir "11NOV"
        mkdir "12DEC"
    elif [ "$1" == "proj" ] && [ "$2" == "" ] ;
    then
        echo " second parameter can't be empty"
        return
    elif [ "$1" == "proj" ] && [ "$2" != "" ] ;
    then
        echo " Making Project Folder = $2"
        mkdir $2
        mkdir -p $2/DOC $2/SCH $2/DATA_SHEET $2/EDID $2/TOOLS
        mkdir -p $2/DOC/EngSpec $2/DOC/OSD_Tree
        mkdir -p $2/SCH/EVT $2/SCH/DVT $2/SCH/PVT $2/SCH/PMP
        mkdir -p $2/EDID/EVT $2/EDID/DVT $2/EDID/PVT $2/EDID/PMP
        mkdir -p $2/DATA_SHEET/Panel $2/DATA_SHEET/SOC $2/DATA_SHEET/Amp
    else
        mkdir $(printf "$STR%02i " $(seq 1 $NUM))
    fi
}

function afind(){
    INFILE=$1

    if [ "$1" == "" ] ;
    then
        echo "Finding ._* pattern"
        INFILE='._*'
    fi

    find . -type f -name "$INFILE" -exec ls -la {} \;
    count=$(find . -type f -name "$INFILE" -exec ls -la {} \; | wc -l | sed 's/^[ \t]*//g')

    echo "Found $count files"

    if [ "$count" == "0" ]; then
        return
    fi


    # Read input.
    echo "Please input d to delete all found files or exit"
    read input_char

    # Check input char.
    if [ "$input_char" == "d" ]; then
        echo "Delete all $INFILE!"
        find . -type f -name "$INFILE" -exec rm {} \;
    else
        echo "Don't delete anything"
        echo ""
        return
    fi
}

function aredir(){
    python ~/Google\ 雲端硬碟/Work/Python/FileHandle/adv_redirect.py $1 "$2"
}

function adv_redir(){
    python ~/Google\ 雲端硬碟/Work/Python/FileHandle/adv_redirect.py $1 "$2"
}

function arename(){
    python ~/Google\ 雲端硬碟/Work/Python/Rename/adv_rename.py $1 "$2"
}

function connect_rapi(){
    if [ "$1" == "" ] ;
    then 
        echo " LAN number is required "
        return
    else
        ssh pi@192.168.0.$1
    fi
}

function stock_div(){
    python ~/Documents/GitHub/Taiwan_Stock/tw_stock_divden_release_date.py
}

function ass2srt(){
    $LINUXSCRIPT_PATH/Ass2Srt/ass2srt.sh
}

function adu(){
    du -sk * | sort -g | awk '{ 

        numBytes = $1 * 1024; 
        numUnits = split("B K M G T P", unit); 
        num = numBytes; 
        iUnit = 0; 

        while(num >= 1024 && iUnit + 1 < numUnits) { 
            num = num / 1024; 
            iUnit++; 
        } 

        $1 = sprintf( ((num == 0) ? "%6d%s " : "%6.1f%s "), num, unit[iUnit + 1]);
        print $0; 

    }'
    echo " To list the size of files !!!"
}

function mount_win_vm_disk(){
    password='000000'    
    HiMediaMacAddr=00:1C:42:4D:4C:AA
    HiMediaMacIP=$(echo "$password\n" | sudo -S nmap -sP 192.168.12.* | awk '/Nmap scan report for/{printf $6;}/MAC Address:/{print " => "$3;}' | grep -i "$HiMediaMacAddr" | sort)
    HiMediaMacIP=$(echo "$HiMediaMacIP" | sed 's/=>//g' | sed 's/00:1C:42:4D:4C:AA//g' | sed 's/^[ \t]*//g' | sed 's/[ \t]*$//g')
    echo "HiMediaMacIP = $HiMediaMacIP"
}
